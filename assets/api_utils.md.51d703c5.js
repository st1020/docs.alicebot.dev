import{_ as e,c as o,o as t,a as l}from"./app.bec4a1f1.js";const g=JSON.parse('{"title":"alicebot.utils","description":"","frontmatter":{},"headers":[{"level":2,"title":"class Condition(self) {#Condition}","slug":"Condition"},{"level":3,"title":"method notify(self, value = None, n = 1) {#Condition.notify}","slug":"Condition.notify"},{"level":3,"title":"method notify_all(self, value = None) {#Condition.notify_all}","slug":"Condition.notify_all"},{"level":3,"title":"async method wait(self) {#Condition.wait}","slug":"Condition.wait"},{"level":3,"title":"async method wait_for(self, predicate) {#Condition.wait_for}","slug":"Condition.wait_for"},{"level":2,"title":"class ModulePathFinder(self, /, args, *kwargs) {#ModulePathFinder}","slug":"ModulePathFinder"},{"level":3,"title":"method find_spec(self, fullname, path=None, target=None) {#ModulePathFinder.find_spec}","slug":"ModulePathFinder.find_spec"},{"level":2,"title":"function load_module(name, module_class_type, try_instantiate_class = False, *args, **kwargs)","slug":"load_module"},{"level":2,"title":"function load_modules_from_dir(_module_path_finder, path, module_class_type)","slug":"load_modules_from_dir"},{"level":2,"title":"class DataclassEncoder(self, *, skipkeys=False, ensureascii=True, checkcircular=True, allownan=True, sortkeys=False, indent=None, separators=None, default=None) {#DataclassEncoder}","slug":"DataclassEncoder"},{"level":3,"title":"method default(self, o) {#DataclassEncoder.default}","slug":"DataclassEncoder.default"}],"relativePath":"api/utils.md","lastUpdated":null}'),a={name:"api/utils.md"},n=l(`<h1 id="alicebot-utils" tabindex="-1">alicebot.utils <a class="header-anchor" href="#alicebot-utils" aria-hidden="true">#</a></h1><h2 id="Condition" tabindex="-1"><em>class</em> <code>Condition</code>(self) <a class="header-anchor" href="#Condition" aria-hidden="true">#</a></h2><p>Bases: <code>\\&lt;class &#39;Generic&#39;\\&lt;</code></p><p>\u7C7B\u4F3C\u4E8E asyncio.Condition \uFF0C\u4F46\u5141\u8BB8\u5728 notify() \u65F6\u4F20\u9012\u503C\uFF0C\u5E76\u7531 wait() \u8FD4\u56DE\u3002</p><h3 id="Condition.notify" tabindex="-1"><em>method</em> <code>notify(self, value = None, n = 1)</code> <a class="header-anchor" href="#Condition.notify" aria-hidden="true">#</a></h3><ul><li><p><strong>Arguments</strong></p><ul><li><p><strong>value</strong> (<em>~_T</em>)</p></li><li><p><strong>n</strong> (<em>int</em>)</p></li></ul></li></ul><h3 id="Condition.notify_all" tabindex="-1"><em>method</em> <code>notify_all(self, value = None)</code> <a class="header-anchor" href="#Condition.notify_all" aria-hidden="true">#</a></h3><ul><li><p><strong>Arguments</strong></p><ul><li><strong>value</strong> (<em>~_T</em>)</li></ul></li></ul><h3 id="Condition.wait" tabindex="-1"><em>async method</em> <code>wait(self)</code> <a class="header-anchor" href="#Condition.wait" aria-hidden="true">#</a></h3><ul><li><p><strong>Returns</strong></p><p>Type: <em>~_T</em></p></li></ul><h3 id="Condition.wait_for" tabindex="-1"><em>async method</em> <code>wait_for(self, predicate)</code> <a class="header-anchor" href="#Condition.wait_for" aria-hidden="true">#</a></h3><ul><li><p><strong>Arguments</strong></p><ul><li><strong>predicate</strong> (<em>Callable[..., bool]</em>)</li></ul></li><li><p><strong>Returns</strong></p><p>Type: <em>bool</em></p></li></ul><h2 id="ModulePathFinder" tabindex="-1"><em>class</em> <code>ModulePathFinder</code>(self, /, *args, **kwargs) <a class="header-anchor" href="#ModulePathFinder" aria-hidden="true">#</a></h2><p>Bases: <code>importlib.abc.MetaPathFinder</code></p><p>\u7528\u4E8E\u67E5\u627E AliceBot \u7EC4\u4EF6\u7684\u5143\u8DEF\u5F84\u67E5\u627E\u5668\u3002</p><ul><li><p><strong>Attributes</strong></p><ul><li><strong>path</strong> (<em>List[str]</em>)</li></ul></li></ul><h3 id="ModulePathFinder.find_spec" tabindex="-1"><em>method</em> <code>find_spec(self, fullname, path=None, target=None)</code> <a class="header-anchor" href="#ModulePathFinder.find_spec" aria-hidden="true">#</a></h3><ul><li><p><strong>Arguments</strong></p><ul><li><p><strong>fullname</strong></p></li><li><p><strong>path</strong></p></li><li><p><strong>target</strong></p></li></ul></li></ul><h2 id="load_module" tabindex="-1"><em>function</em> <code>load_module(name, module_class_type, try_instantiate_class = False, *args, **kwargs)</code> <a class="header-anchor" href="#load_module" aria-hidden="true">#</a></h2><p>\u4ECE\u6A21\u5757\u4E2D\u67E5\u627E\u6307\u5B9A\u7C7B\u578B\u7684\u7C7B\u548C <code>Config</code> \u3002\u82E5\u6A21\u5757\u4E2D\u5B58\u5728\u591A\u4E2A\u7B26\u5408\u6761\u4EF6\u7684\u7C7B\uFF0C\u5219\u629B\u51FA\u9519\u8BEF\u3002</p><ul><li><p><strong>Arguments</strong></p><ul><li><p><strong>name</strong> (<em>str</em>) - \u6A21\u5757\u540D\u79F0\uFF0C\u683C\u5F0F\u548C Python <code>import</code> \u8BED\u53E5\u76F8\u540C\u3002</p></li><li><p><strong>module_class_type</strong> (<em>Type[~_T]</em>) - \u8981\u67E5\u627E\u7684\u7C7B\u578B\u3002</p></li><li><p><strong>try_instantiate_class</strong> (<em>bool</em>) - \u662F\u5426\u5C1D\u8BD5\u5B9E\u4F8B\u5316\u7C7B\u3002 \u5F53\u4E3A True \u65F6\uFF0C\u67E5\u627E\u5230\u6307\u5B9A\u7684\u7C7B\u540E\u4F1A\u5C1D\u8BD5\u4F7F\u7528\u6307\u5B9A\u53C2\u6570\u793A\u4F8B\u5316\u7C7B\uFF0C\u4EC5\u8FD4\u56DE\u6210\u529F\u88AB\u5B9E\u4F8B\u5316\u7684\u5BF9\u8C61\u3002</p></li><li><p>*<strong>args</strong> - \u5B9E\u4F8B\u5316\u7C7B\u65F6\u4F7F\u7528\u7684\u53C2\u6570\uFF0C\u4EC5\u5F53 <code>try_instantiate_class</code> \u4E3A True \u65F6\u751F\u6548\u3002</p></li><li><p>**<strong>kwargs</strong> - \u5B9E\u4F8B\u5316\u7C7B\u65F6\u4F7F\u7528\u7684\u53C2\u6570\uFF0C\u4EC5\u5F53 <code>try_instantiate_class</code> \u4E3A True \u65F6\u751F\u6548\u3002</p></li></ul></li><li><p><strong>Returns</strong></p><p>Type: <em>Tuple[Union[Type[~_T], ~_T], Union[Type[pydantic.main.BaseModel], NoneType]]</em></p><p><code>(class, config)</code> \u8FD4\u56DE\u7B26\u5408\u6761\u4EF6\u7684\u7C7B\u548C\u914D\u7F6E\u7C7B\u7EC4\u6210\u7684\u5143\u7EC4\u3002 \u5F53 <code>try_instantiate_class</code> \u4E3A True \u65F6\uFF0C\u8FD4\u56DE <code>(object, config)</code> \u3002</p></li><li><p><strong>Raises</strong></p><ul><li><strong>LoadModuleError</strong> - \u5F53\u627E\u4E0D\u5230\u7B26\u5408\u6761\u4EF6\u7684\u7C7B\u6216\u8005\u6A21\u5757\u4E2D\u5B58\u5728\u591A\u4E2A\u7B26\u5408\u6761\u4EF6\u7684\u7C7B\u3002</li></ul></li></ul><h2 id="load_modules_from_dir" tabindex="-1"><em>function</em> <code>load_modules_from_dir(_module_path_finder, path, module_class_type)</code> <a class="header-anchor" href="#load_modules_from_dir" aria-hidden="true">#</a></h2><p>\u4ECE\u6307\u5B9A\u8DEF\u5F84\u5217\u8868\u4E2D\u7684\u6240\u6709\u6A21\u5757\u4E2D\u67E5\u627E\u6307\u5B9A\u7C7B\u578B\u7684\u7C7B\u548C <code>Config</code> \uFF0C\u4EE5 <code>_</code> \u5F00\u5934\u7684\u63D2\u4EF6\u4E0D\u4F1A\u88AB\u5BFC\u5165\u3002\u8DEF\u5F84\u53EF\u4EE5\u662F\u76F8\u5BF9\u8DEF\u5F84\u6216\u7EDD\u5BF9\u8DEF\u5F84\u3002</p><ul><li><p><strong>Arguments</strong></p><ul><li><p><strong>_module_path_finder</strong> (<em>alicebot.utils.ModulePathFinder</em>) - \u7528\u4E8E\u67E5\u627E AliceBot \u7EC4\u4EF6\u7684\u5143\u8DEF\u5F84\u67E5\u627E\u5668\u3002</p></li><li><p><strong>path</strong> (<em>Iterable[str]</em>) - \u7531\u50A8\u5B58\u6A21\u5757\u7684\u8DEF\u5F84\u6587\u672C\u7EC4\u6210\u7684\u5217\u8868\u3002 \u4F8B\u5982 <code>[&#39;path/of/plugins/&#39;, &#39;/home/xxx/alicebot/plugins&#39;]</code> \u3002</p></li><li><p><strong>module_class_type</strong> (<em>Type[~_T]</em>) - \u8981\u67E5\u627E\u7684\u7C7B\u578B\u3002</p></li></ul></li><li><p><strong>Returns</strong></p><p>Type: <em>List[Tuple[Type[~_T], Union[Type[pydantic.main.BaseModel], NoneType], ModuleInfo]]</em></p><p><code>[(class, config, module_info), ...]</code> \u8FD4\u56DE\u7531\u7B26\u5408\u6761\u4EF6\u7684\u7C7B\u3001\u914D\u7F6E\u7C7B\u548C <code>ModuleInfo</code> \u7EC4\u6210\u7684\u5143\u7EC4\u7EC4\u6210\u7684\u5217\u8868\u3002</p></li></ul><h2 id="DataclassEncoder" tabindex="-1"><em>class</em> <code>DataclassEncoder</code>(self, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None) <a class="header-anchor" href="#DataclassEncoder" aria-hidden="true">#</a></h2><p>Bases: <code>json.encoder.JSONEncoder</code></p><p>\u7528\u4E8E\u89E3\u6790 MessageSegment \u7684 JSONEncoder \u7C7B\u3002</p><ul><li><p><strong>Arguments</strong></p><ul><li><p><strong>skipkeys</strong></p></li><li><p><strong>ensure_ascii</strong></p></li><li><p><strong>check_circular</strong></p></li><li><p><strong>allow_nan</strong></p></li><li><p><strong>sort_keys</strong></p></li><li><p><strong>indent</strong></p></li><li><p><strong>separators</strong></p></li><li><p><strong>default</strong></p></li></ul></li></ul><h3 id="DataclassEncoder.default" tabindex="-1"><em>method</em> <code>default(self, o)</code> <a class="header-anchor" href="#DataclassEncoder.default" aria-hidden="true">#</a></h3><p>Implement this method in a subclass such that it returns</p><p>a serializable object for <code>o</code>, or calls the base implementation (to raise a <code>TypeError</code>).</p><p>For example, to support arbitrary iterators, you could implement default like this::</p><pre><code>def default(self, o):
    try:
        iterable = iter(o)
    except TypeError:
        pass
    else:
        return list(iterable)
    # Let the base class default method raise the TypeError
    return JSONEncoder.default(self, o)
</code></pre><ul><li><p><strong>Arguments</strong></p><ul><li><strong>o</strong></li></ul></li></ul>`,34),i=[n];function s(r,d,c,p,u,h){return t(),o("div",null,i)}var _=e(a,[["render",s]]);export{g as __pageData,_ as default};
